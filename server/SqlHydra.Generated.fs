// This code was generated by `SqlHydra.Sqlite` -- v2.8.1.
namespace MyWebApi.Data.SqlHydraGenerated

open SqlHydra
open SqlHydra.Query.Table

[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some(getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> null
            | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T: struct and 'T: (new: unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> System.Nullable<'T>()
            | o -> System.Nullable<'T>(getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) =
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime

    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) =
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan

module main =

    [<CLIMutable>]
    type ProductMaster =
        { Id: int64
          Code: string
          Name: string
          Price: double
          CreatedAt: string }

    let ProductMaster = table<ProductMaster>

    [<CLIMutable>]
    type Products =
        { Id: int64
          Code: string
          Name: string
          Description: Option<string>
          Category: Option<string>
          Price: double
          Stock: int64
          SKU: string
          IsActive: int64
          CreatedAt: string
          UpdatedAt: Option<string>
          Public01: Option<string>
          Public02: Option<string>
          Public03: Option<string>
          Public04: Option<string>
          Public05: Option<string>
          Public06: Option<string>
          Public07: Option<string>
          Public08: Option<string>
          Public09: Option<string>
          Public10: Option<string> }

    let Products = table<Products>

    [<CLIMutable>]
    type Users =
        { Id: int64
          Username: string
          Email: string
          PasswordHash: string
          CreatedAt: string }

    let Users = table<Users>

    module Readers =
        type ProductMasterReader(reader: Microsoft.Data.Sqlite.SqliteDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Id")
            member __.Code = RequiredColumn(reader, getOrdinal, reader.GetString, "Code")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.Price = RequiredColumn(reader, getOrdinal, reader.GetDouble, "Price")
            member __.CreatedAt = RequiredColumn(reader, getOrdinal, reader.GetString, "CreatedAt")

            member __.Read() =
                { Id = __.Id.Read()
                  Code = __.Code.Read()
                  Name = __.Name.Read()
                  Price = __.Price.Read()
                  CreatedAt = __.CreatedAt.Read() }
                : ProductMaster

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type ProductsReader(reader: Microsoft.Data.Sqlite.SqliteDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Id")
            member __.Code = RequiredColumn(reader, getOrdinal, reader.GetString, "Code")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.Description = OptionColumn(reader, getOrdinal, reader.GetString, "Description")
            member __.Category = OptionColumn(reader, getOrdinal, reader.GetString, "Category")
            member __.Price = RequiredColumn(reader, getOrdinal, reader.GetDouble, "Price")
            member __.Stock = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Stock")
            member __.SKU = RequiredColumn(reader, getOrdinal, reader.GetString, "SKU")
            member __.IsActive = RequiredColumn(reader, getOrdinal, reader.GetInt64, "IsActive")
            member __.CreatedAt = RequiredColumn(reader, getOrdinal, reader.GetString, "CreatedAt")
            member __.UpdatedAt = OptionColumn(reader, getOrdinal, reader.GetString, "UpdatedAt")
            member __.Public01 = OptionColumn(reader, getOrdinal, reader.GetString, "Public01")
            member __.Public02 = OptionColumn(reader, getOrdinal, reader.GetString, "Public02")
            member __.Public03 = OptionColumn(reader, getOrdinal, reader.GetString, "Public03")
            member __.Public04 = OptionColumn(reader, getOrdinal, reader.GetString, "Public04")
            member __.Public05 = OptionColumn(reader, getOrdinal, reader.GetString, "Public05")
            member __.Public06 = OptionColumn(reader, getOrdinal, reader.GetString, "Public06")
            member __.Public07 = OptionColumn(reader, getOrdinal, reader.GetString, "Public07")
            member __.Public08 = OptionColumn(reader, getOrdinal, reader.GetString, "Public08")
            member __.Public09 = OptionColumn(reader, getOrdinal, reader.GetString, "Public09")
            member __.Public10 = OptionColumn(reader, getOrdinal, reader.GetString, "Public10")

            member __.Read() =
                { Id = __.Id.Read()
                  Code = __.Code.Read()
                  Name = __.Name.Read()
                  Description = __.Description.Read()
                  Category = __.Category.Read()
                  Price = __.Price.Read()
                  Stock = __.Stock.Read()
                  SKU = __.SKU.Read()
                  IsActive = __.IsActive.Read()
                  CreatedAt = __.CreatedAt.Read()
                  UpdatedAt = __.UpdatedAt.Read()
                  Public01 = __.Public01.Read()
                  Public02 = __.Public02.Read()
                  Public03 = __.Public03.Read()
                  Public04 = __.Public04.Read()
                  Public05 = __.Public05.Read()
                  Public06 = __.Public06.Read()
                  Public07 = __.Public07.Read()
                  Public08 = __.Public08.Read()
                  Public09 = __.Public09.Read()
                  Public10 = __.Public10.Read() }
                : Products

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type UsersReader(reader: Microsoft.Data.Sqlite.SqliteDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Id")
            member __.Username = RequiredColumn(reader, getOrdinal, reader.GetString, "Username")
            member __.Email = RequiredColumn(reader, getOrdinal, reader.GetString, "Email")
            member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
            member __.CreatedAt = RequiredColumn(reader, getOrdinal, reader.GetString, "CreatedAt")

            member __.Read() =
                { Id = __.Id.Read()
                  Username = __.Username.Read()
                  Email = __.Email.Read()
                  PasswordHash = __.PasswordHash.Read()
                  CreatedAt = __.CreatedAt.Read() }
                : Users

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.Sqlite.SqliteDataReader) =

    let mutable accFieldCount = 0

    let buildGetOrdinal tableType =
        let fieldNames = FSharp.Reflection.FSharpType.GetRecordFields(tableType) |> Array.map _.Name

        let dictionary =
            [| 0 .. reader.FieldCount - 1 |]
            |> Array.map (fun i -> reader.GetName(i), i)
            |> Array.sortBy snd
            |> Array.skip accFieldCount
            |> Array.filter (fun (name, _) -> Array.contains name fieldNames)
            |> Array.take fieldNames.Length
            |> dict

        accFieldCount <- accFieldCount + fieldNames.Length
        fun col -> dictionary.Item col

    let lazymainProductMaster = lazy (main.Readers.ProductMasterReader(reader, buildGetOrdinal typeof<main.ProductMaster>))
    let lazymainProducts = lazy (main.Readers.ProductsReader(reader, buildGetOrdinal typeof<main.Products>))
    let lazymainUsers = lazy (main.Readers.UsersReader(reader, buildGetOrdinal typeof<main.Users>))
    member __.``main.ProductMaster`` = lazymainProductMaster.Value
    member __.``main.Products`` = lazymainProducts.Value
    member __.``main.Users`` = lazymainUsers.Value

    member private __.AccFieldCount
        with get () = accFieldCount
        and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "main.ProductMaster", false -> __.``main.ProductMaster``.Read >> box
        | "main.ProductMaster", true -> __.``main.ProductMaster``.ReadIfNotNull >> box
        | "main.Products", false -> __.``main.Products``.Read >> box
        | "main.Products", true -> __.``main.Products``.ReadIfNotNull >> box
        | "main.Users", false -> __.``main.Users``.Read >> box
        | "main.Users", true -> __.``main.Users``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.Sqlite.SqliteDataReader, isOpt: bool, isNullable: bool) =

        let wrapValue get (ord: int) =
            if isOpt then
                (if reader.IsDBNull ord then None else get ord |> Some) |> box
            elif isNullable then
                (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable)
                |> box
            else
                get ord |> box

        let wrapRef get (ord: int) =
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box else get ord |> box

        if t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        elif t = typedefof<int> then Some(wrapValue reader.GetInt32)
        elif t = typedefof<double> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<System.Single> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        elif t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        elif t = typedefof<byte> then Some(wrapValue reader.GetByte)
        elif t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        elif t = typedefof<byte[]> then Some(wrapRef reader.GetFieldValue<byte[]>)
        elif t = typedefof<string> then Some(wrapRef reader.GetString)
        elif t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        elif t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        elif t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        else None

    static member Read(reader: Microsoft.Data.Sqlite.SqliteDataReader) =
        let hydra = HydraReader(reader)


        let getOrdinalAndIncrement () =
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal

        let buildEntityReadFn (t: System.Type) =
            let t, isOpt, isNullable =
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments[0], false, true
                else t, false, false

            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader ->
                let ord = getOrdinalAndIncrement ()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])

                let schemaAndType =
                    nameParts
                    |> Array.skip (nameParts.Length - 2)
                    |> fun parts -> System.String.Join(".", parts)

                hydra.GetReaderByName(schemaAndType, isOpt)

        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>

        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn

            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read ())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> readEntityFn () :?> 'T


/// Provides select builders that use the generated HydraReader.Read.
module HydraBuilders =
    open SqlHydra.Query

    /// Builds a select query with a QueryContext - returns a Task query result
    let selectTask ct =
        selectTask<'Selected, 'Mapped, Microsoft.Data.Sqlite.SqliteDataReader> HydraReader.Read ct

    /// Builds a select query with a QueryContext - returns an Async query result
    let selectAsync ct =
        selectAsync<'Selected, 'Mapped, Microsoft.Data.Sqlite.SqliteDataReader> HydraReader.Read ct
